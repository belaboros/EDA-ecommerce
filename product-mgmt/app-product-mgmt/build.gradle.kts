/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
	application
	id("org.springframework.boot") version "3.4.1"
	id("io.spring.dependency-management") version "1.1.6"
	//id("com.bmuschko.docker-spring-boot-application") version "9.4.0"
}
//import com.bmuschko.gradle.docker.tasks.image.Dockerfile
//import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

/*
 * Gradle & Docker & Spring:
 * 	- https://bmuschko.github.io/gradle-docker-plugin/current/user-guide/#spring_boot_application_plugin
 * 	- https://plugins.gradle.org/plugin/com.bmuschko.docker-spring-boot-application
 *  - https://hub.docker.com/_/openjdk/tags?name=23-jdk-slim
 */


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.kafka:spring-kafka")

	implementation("org.postgresql:postgresql")

	compileOnly("org.projectlombok:lombok:1.18.36")
	annotationProcessor("org.projectlombok:lombok:1.18.36")

	implementation("org.json:json:20240303")

	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")


    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.msffp.product.ProductApp"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


// java {
//     // https://docs.gradle.org/current/javadoc/org/gradle/api/JavaVersion.html 
//     sourceCompatibility = JavaVersion.VERSION_23
//     targetCompatibility = JavaVersion.VERSION_23
// }
//
// docker {
//     springBootApplication {
//         baseImage.set("openjdk:23-jdk-slim")
//         ports.set(listOf(8090))
//         images.set(setOf("EDA-ecommerce-product-mgmt:0.1", "EDA-ecommerce-product-mgmt:latest"))
//         //jvmArgs.set(listOf("-Dspring.profiles.active=production", "-Xmx1024m"))
//         jvmArgs.set(listOf("-Xmx1024m"))
//     }
// }
